// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric (interfaces: Meter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	instrument "go.opentelemetry.io/otel/metric/instrument"
	asyncfloat64 "go.opentelemetry.io/otel/metric/instrument/asyncfloat64"
	asyncint64 "go.opentelemetry.io/otel/metric/instrument/asyncint64"
	syncfloat64 "go.opentelemetry.io/otel/metric/instrument/syncfloat64"
	syncint64 "go.opentelemetry.io/otel/metric/instrument/syncint64"
)

// MockMeter is a mock of Meter interface.
type MockMeter struct {
	ctrl     *gomock.Controller
	recorder *MockMeterMockRecorder
}

// MockMeterMockRecorder is the mock recorder for MockMeter.
type MockMeterMockRecorder struct {
	mock *MockMeter
}

// NewMockMeter creates a new mock instance.
func NewMockMeter(ctrl *gomock.Controller) *MockMeter {
	mock := &MockMeter{ctrl: ctrl}
	mock.recorder = &MockMeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeter) EXPECT() *MockMeterMockRecorder {
	return m.recorder
}

// AsyncFloat64 mocks base method.
func (m *MockMeter) AsyncFloat64() asyncfloat64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncFloat64")
	ret0, _ := ret[0].(asyncfloat64.InstrumentProvider)
	return ret0
}

// AsyncFloat64 indicates an expected call of AsyncFloat64.
func (mr *MockMeterMockRecorder) AsyncFloat64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncFloat64", reflect.TypeOf((*MockMeter)(nil).AsyncFloat64))
}

// AsyncInt64 mocks base method.
func (m *MockMeter) AsyncInt64() asyncint64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncInt64")
	ret0, _ := ret[0].(asyncint64.InstrumentProvider)
	return ret0
}

// AsyncInt64 indicates an expected call of AsyncInt64.
func (mr *MockMeterMockRecorder) AsyncInt64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncInt64", reflect.TypeOf((*MockMeter)(nil).AsyncInt64))
}

// RegisterCallback mocks base method.
func (m *MockMeter) RegisterCallback(arg0 []instrument.Asynchronous, arg1 func(context.Context)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCallback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCallback indicates an expected call of RegisterCallback.
func (mr *MockMeterMockRecorder) RegisterCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCallback", reflect.TypeOf((*MockMeter)(nil).RegisterCallback), arg0, arg1)
}

// SyncFloat64 mocks base method.
func (m *MockMeter) SyncFloat64() syncfloat64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFloat64")
	ret0, _ := ret[0].(syncfloat64.InstrumentProvider)
	return ret0
}

// SyncFloat64 indicates an expected call of SyncFloat64.
func (mr *MockMeterMockRecorder) SyncFloat64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFloat64", reflect.TypeOf((*MockMeter)(nil).SyncFloat64))
}

// SyncInt64 mocks base method.
func (m *MockMeter) SyncInt64() syncint64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncInt64")
	ret0, _ := ret[0].(syncint64.InstrumentProvider)
	return ret0
}

// SyncInt64 indicates an expected call of SyncInt64.
func (mr *MockMeterMockRecorder) SyncInt64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncInt64", reflect.TypeOf((*MockMeter)(nil).SyncInt64))
}
