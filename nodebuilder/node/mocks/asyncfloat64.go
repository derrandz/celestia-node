// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/metric/instrument/asyncfloat64 (interfaces: InstrumentProvider,Counter,Gauge)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	attribute "go.opentelemetry.io/otel/attribute"
	instrument "go.opentelemetry.io/otel/metric/instrument"
	asyncfloat64 "go.opentelemetry.io/otel/metric/instrument/asyncfloat64"
)

// MockInstrumentProvider is a mock of InstrumentProvider interface.
type MockInstrumentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockInstrumentProviderMockRecorder
}

// MockInstrumentProviderMockRecorder is the mock recorder for MockInstrumentProvider.
type MockInstrumentProviderMockRecorder struct {
	mock *MockInstrumentProvider
}

// NewMockInstrumentProvider creates a new mock instance.
func NewMockInstrumentProvider(ctrl *gomock.Controller) *MockInstrumentProvider {
	mock := &MockInstrumentProvider{ctrl: ctrl}
	mock.recorder = &MockInstrumentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstrumentProvider) EXPECT() *MockInstrumentProviderMockRecorder {
	return m.recorder
}

// Counter mocks base method.
func (m *MockInstrumentProvider) Counter(arg0 string, arg1 ...instrument.Option) (asyncfloat64.Counter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Counter", varargs...)
	ret0, _ := ret[0].(asyncfloat64.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Counter indicates an expected call of Counter.
func (mr *MockInstrumentProviderMockRecorder) Counter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockInstrumentProvider)(nil).Counter), varargs...)
}

// Gauge mocks base method.
func (m *MockInstrumentProvider) Gauge(arg0 string, arg1 ...instrument.Option) (asyncfloat64.Gauge, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gauge", varargs...)
	ret0, _ := ret[0].(asyncfloat64.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gauge indicates an expected call of Gauge.
func (mr *MockInstrumentProviderMockRecorder) Gauge(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockInstrumentProvider)(nil).Gauge), varargs...)
}

// UpDownCounter mocks base method.
func (m *MockInstrumentProvider) UpDownCounter(arg0 string, arg1 ...instrument.Option) (asyncfloat64.UpDownCounter, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpDownCounter", varargs...)
	ret0, _ := ret[0].(asyncfloat64.UpDownCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpDownCounter indicates an expected call of UpDownCounter.
func (mr *MockInstrumentProviderMockRecorder) UpDownCounter(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpDownCounter", reflect.TypeOf((*MockInstrumentProvider)(nil).UpDownCounter), varargs...)
}

// MockCounter is a mock of Counter interface.
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter.
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance.
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *MockCounter) Observe(arg0 context.Context, arg1 float64, arg2 ...attribute.KeyValue) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Observe", varargs...)
}

// Observe indicates an expected call of Observe.
func (mr *MockCounterMockRecorder) Observe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockCounter)(nil).Observe), varargs...)
}

// asynchronous mocks base method.
func (m *MockCounter) asynchronous() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "asynchronous")
}

// asynchronous indicates an expected call of asynchronous.
func (mr *MockCounterMockRecorder) asynchronous() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "asynchronous", reflect.TypeOf((*MockCounter)(nil).asynchronous))
}

// MockGauge is a mock of Gauge interface.
type MockGauge struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMockRecorder
}

// MockGaugeMockRecorder is the mock recorder for MockGauge.
type MockGaugeMockRecorder struct {
	mock *MockGauge
}

// NewMockGauge creates a new mock instance.
func NewMockGauge(ctrl *gomock.Controller) *MockGauge {
	mock := &MockGauge{ctrl: ctrl}
	mock.recorder = &MockGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGauge) EXPECT() *MockGaugeMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *MockGauge) Observe(arg0 context.Context, arg1 float64, arg2 ...attribute.KeyValue) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Observe", varargs...)
}

// Observe indicates an expected call of Observe.
func (mr *MockGaugeMockRecorder) Observe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockGauge)(nil).Observe), varargs...)
}

// asynchronous mocks base method.
func (m *MockGauge) asynchronous() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "asynchronous")
}

// asynchronous indicates an expected call of asynchronous.
func (mr *MockGaugeMockRecorder) asynchronous() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "asynchronous", reflect.TypeOf((*MockGauge)(nil).asynchronous))
}
